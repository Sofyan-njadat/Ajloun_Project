
<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>مديرية ثقافة عجلون | Ajloun Directorate of Culture</title>

    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com/" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Tajawal:wght@400;500;700;900&family=Playfair+Display:wght@400;500;700&display=swap" rel="stylesheet">

    <!-- Icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

    <!-- Libraries -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@9/swiper-bundle.min.css" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">

    <script src="https://cdn.jsdelivr.net/npm/gsap@3.11.5/dist/gsap.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/gsap@3.11.5/dist/ScrollTrigger.min.js"></script>

    <link rel="stylesheet" href="~/css/index.css">
    <link rel="stylesheet" href="~/css/ArticleDetails.css">


</head>
<body class="lang-ar">
   <br /><br /><br /><br />
    <main class="article-details container">
        <h1>@Model.Title</h1>
        <p class="article-meta">الفئة: @Model.Category | الكاتب: @Model.AuthorName | @Model.PublishDate.ToString("dd MMMM yyyy")</p>
        <img src="@Model.CoverImageUrl" alt="صورة المجلّة" class="article-cover" />
        <div class="article-content">
            @Html.Raw(Model.Content)
        </div>
    </main>
  
    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/swiper@9/swiper-bundle.min.js"></script>
    <script>
        // Mobile Menu Toggle
        const hamburger = document.querySelector('.hamburger');
        const navLinks = document.querySelector('.nav-links');

        hamburger.addEventListener('click', () => {
            navLinks.classList.toggle('active');
            hamburger.classList.toggle('active');
        });

        // Language Switcher
        const languageBtns = document.querySelectorAll('.language-btn');
        const elementsToTranslate = document.querySelectorAll('[data-ar], [data-en]');
        const placeholdersToTranslate = document.querySelectorAll('[data-ar-placeholder], [data-en-placeholder]');

        languageBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                const lang = btn.dataset.lang;

                languageBtns.forEach(b => b.classList.remove('active'));
                btn.classList.add('active');

                document.documentElement.lang = lang;

                if (lang === 'ar') {
                    document.documentElement.dir = 'rtl';
                    document.body.className = 'lang-ar';

                    // Translate text content
                    elementsToTranslate.forEach(el => {
                        if (el.dataset.ar) {
                            el.textContent = el.dataset.ar;
                        }
                    });

                    // Translate placeholders
                    placeholdersToTranslate.forEach(el => {
                        if (el.dataset.arPlaceholder) {
                            el.placeholder = el.dataset.arPlaceholder;
                        }
                    });
                } else {
                    document.documentElement.dir = 'ltr';
                    document.body.className = 'lang-en';

                    // Translate text content
                    elementsToTranslate.forEach(el => {
                        if (el.dataset.en) {
                            el.textContent = el.dataset.en;
                        }
                    });

                    // Translate placeholders
                    placeholdersToTranslate.forEach(el => {
                        if (el.dataset.enPlaceholder) {
                            el.placeholder = el.dataset.enPlaceholder;
                        }
                    });
                }
            });
        });

        // Navbar Scroll Effect
        window.addEventListener('scroll', () => {
            if (window.scrollY > 50) {
                document.querySelector('.navbar').classList.add('scrolled');
            } else {
                document.querySelector('.navbar').classList.remove('scrolled');
            }
        });

        // Events Slider
        const eventsSlider = new Swiper('.events-slider', {
            slidesPerView: 1,
            spaceBetween: 20,
            loop: true,
            autoplay: {
                delay: 5000,
                disableOnInteraction: false,
            },
            pagination: {
                el: '.swiper-pagination',
                clickable: true,
            },
            breakpoints: {
                768: {
                    slidesPerView: 2,
                },
                992: {
                    slidesPerView: 3,
                }
            }
        });

        // Testimonials Slider
        const testimonialsSlider = new Swiper('.testimonials-slider', {
            slidesPerView: 1,
            loop: true,
            autoplay: {
                delay: 7000,
                disableOnInteraction: false,
            },
            pagination: {
                el: '.swiper-pagination',
                clickable: true,
            }
        });

        // Counter Animation
        const statNumbers = document.querySelectorAll('.stat-number');

        function animateCounters() {
            statNumbers.forEach(stat => {
                const target = parseInt(stat.dataset.count);
                const duration = 2000;
                const step = target / (duration / 16);
                let current = 0;

                const counter = setInterval(() => {
                    current += step;
                    if (current >= target) {
                        clearInterval(counter);
                        stat.textContent = target;
                    } else {
                        stat.textContent = Math.floor(current);
                    }
                }, 16);
            });
        }

        // GSAP Animations
        gsap.registerPlugin(ScrollTrigger);

        // Animate hero content
        gsap.from('.hero-subtitle', {
            opacity: 0,
            y: 50,
            duration: 1,
            delay: 0.5
        });

        gsap.from('.hero-title', {
            opacity: 0,
            y: 50,
            duration: 1,
            delay: 0.8
        });

        gsap.from('.hero-text', {
            opacity: 0,
            y: 50,
            duration: 1,
            delay: 1.1
        });

        gsap.from('.hero-buttons', {
            opacity: 0,
            y: 50,
            duration: 1,
            delay: 1.4
        });

        // Animate sections on scroll
        gsap.utils.toArray('.animate-on-scroll').forEach(section => {
            gsap.from(section, {
                opacity: 0,
                y: 100,
                duration: 1,
                scrollTrigger: {
                    trigger: section,
                    start: 'top 80%',
                    toggleActions: 'play none none none'
                }
            });
        });

        // Animate about section
        gsap.from('.about-image', {
            scrollTrigger: {
                trigger: '.about',
                start: 'top 70%',
                toggleActions: 'play none none none'
            },
            x: -100,
            opacity: 0,
            duration: 1
        });

        gsap.from('.about-text', {
            scrollTrigger: {
                trigger: '.about',
                start: 'top 70%',
                toggleActions: 'play none none none'
            },
            x: 100,
            opacity: 0,
            duration: 1
        });

        // Initialize counters when stats section is in view
        ScrollTrigger.create({
            trigger: '.stats',
            start: 'top 70%',
            onEnter: animateCounters
        });

        // Parallax effect for hero background
        gsap.to('.hero-bg', {
            scrollTrigger: {
                scrub: true
            },
            y: 100,
            scale: 1.1
        });
    </script>
</body>
</html>